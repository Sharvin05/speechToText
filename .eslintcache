[{"D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\index.js":"1","D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\App.js":"2","D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\token_util.js":"3","D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\AudioRecord.js":"4","D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\Acs.js":"5","D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\WavRecoder.js":"6","D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\SpeechToText.js":"7"},{"size":239,"mtime":1629953384000,"results":"8","hashOfConfig":"9"},{"size":523,"mtime":1659688759420,"results":"10","hashOfConfig":"9"},{"size":981,"mtime":1629953384000,"results":"11","hashOfConfig":"9"},{"size":875,"mtime":1659525356882,"results":"12","hashOfConfig":"9"},{"size":4990,"mtime":1659682277668,"results":"13","hashOfConfig":"9"},{"size":1263,"mtime":1659530208210,"results":"14","hashOfConfig":"9"},{"size":4098,"mtime":1659696270921,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"5s43hy",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\index.js",[],["34","35"],"D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\App.js",[],"D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\token_util.js",[],"D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\AudioRecord.js",[],["36","37"],"D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\Acs.js",["38","39","40"],"import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { getTokenOrRefresh } from './token_util';\r\nimport './custom.css'\r\n\r\nconst speechsdk = require('microsoft-cognitiveservices-speech-sdk')\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            displayText: 'INITIALIZED: ready to test speech...',\r\n            cancel:0,\r\n            audioConfig:null,\r\n            tokenObj:null,\r\n            speechConfig:null,\r\n            recognizer:null\r\n        }\r\n\r\n    }\r\n \r\n    async componentDidMount() {\r\n        // check for valid speech key/region\r\n        const tokenRes = await getTokenOrRefresh();\r\n        \r\n        if (tokenRes.authToken === null) {\r\n            this.setState({\r\n                displayText: 'FATAL_ERROR: ' + tokenRes.error,                \r\n            });\r\n        }\r\n        \r\n    }\r\n    async sttFromMic() {   \r\n        const tokenObj = await getTokenOrRefresh();     \r\n        this.setState({\r\n            audioConfig:speechsdk.AudioConfig.fromDefaultMicrophoneInput(),\r\n            speechConfig:speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region)\r\n            \r\n            \r\n        })\r\n        this.setState({\r\n            recognizer:new speechsdk.SpeechRecognizer(this.state.speechConfig, this.state.audioConfig)\r\n        })\r\n        this.state.recognizer.startContinuousRecognitionAsync();\r\n        // recognizer.startContinuousRecognitionAsync();\r\n\r\n        this.state.recognizer.recognizing = (s, e) => {\r\n            this.setState({\r\n                displayText: `RECOGNIZING: Text=${e.result.text}`\r\n            });\r\n            \r\n        };\r\n\r\n        this.state.recognizer.recognized = (s, e) => {\r\n            if (e.result.reason == speechsdk.ResultReason.RecognizedSpeech) {\r\n                this.setState({\r\n                        displayText:`RECOGNIZED: Text=${e.result.text}`,\r\n                        cancel:1\r\n                })\r\n                \r\n            }\r\n            else if (e.result.reason == speechsdk.ResultReason.NoMatch) {\r\n                this.setState({\r\n                    displayText:`Speech coud not be recognized`\r\n            })\r\n            }\r\n        };\r\n        \r\n        \r\n        this.state.recognizer.canceled = (s, e) => {\r\n            console.log(`CANCELED: Reason=${e.reason}`);\r\n\r\n            if (e.reason == speechsdk.CancellationReason.Error) {\r\n                this.state.recognizer.stopContinuousRecognitionAsync();\r\n                console.log(`\"CANCELED: ErrorCode=${e.errorCode}`);\r\n                console.log(`\"CANCELED: ErrorDetails=${e.errorDetails}`);\r\n                console.log(\"CANCELED: Did you set the speech resource key and region values?\");\r\n            }\r\n        };\r\n\r\n        this.state.recognizer.sessionStopped = (s, e) => {            \r\n            console.log(\"\\n    Session stopped event.\");\r\n            this.state.recognizer.stopContinuousRecognitionAsync();\r\n            this.setState({\r\n                cancel:0\r\n            }) \r\n        };\r\n    }\r\n    // async sttFromMic() {\r\n    //     const tokenObj = await getTokenOrRefresh();\r\n    //     const speechConfig = speechsdk.SpeechConfig.fromAuthorizationToken(tokenObj.authToken, tokenObj.region);\r\n    //     speechConfig.speechRecognitionLanguage = 'en-US';\r\n\r\n    //     const audioConfig = speechsdk.AudioConfig.fromDefaultMicrophoneInput();\r\n    //     const recognizer = new speechsdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n    //     this.setState({\r\n    //         displayText: 'speak into your microphone...'\r\n    //     });\r\n    //     recognizer.recognizeOnceAsync(result => {\r\n    //         let displayText;\r\n    //         if (result.reason == ResultReason.RecognizedSpeech) {\r\n    //             displayText = `RECOGNIZED: Text=${result.text}`\r\n    //         } else {\r\n    //             displayText = 'ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.';\r\n    //         }\r\n\r\n    //         this.setState({\r\n    //             displayText: displayText\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"app-container\">\r\n                <h1 className=\"display-4 mb-3\">Speech sample app</h1>\r\n\r\n                <div className=\"row main-container\">\r\n                    <div className=\"col-6\">\r\n                        <button style={{\"margin-right\":\"20px\"}} className=\"btn btn-primary\" onClick={() => this.sttFromMic()}>start</button>\r\n                        <button className=\"btn btn-primary\" onClick={() => this.state.recognizer.stopContinuousRecognitionAsync()}>stop</button>\r\n                    </div>\r\n                    <div className=\"col-6 output-display rounded\">\r\n                        <code>{this.state.displayText}</code>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}","D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\WavRecoder.js",[],["41","42"],"D:\\tech unicorn\\voicerecognition\\AzureSpeechReactSample-main\\src\\SpeechToText.js",["43","44","45","46","47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"49","replacedBy":"53"},{"ruleId":"51","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":57,"column":33,"nodeType":"57","messageId":"58","endLine":57,"endColumn":35},{"ruleId":"55","severity":1,"message":"56","line":64,"column":38,"nodeType":"57","messageId":"58","endLine":64,"endColumn":40},{"ruleId":"55","severity":1,"message":"56","line":75,"column":26,"nodeType":"57","messageId":"58","endLine":75,"endColumn":28},{"ruleId":"49","replacedBy":"59"},{"ruleId":"51","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":13},{"ruleId":"61","severity":1,"message":"65","line":17,"column":19,"nodeType":"63","messageId":"64","endLine":17,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":47,"column":33,"nodeType":"57","messageId":"58","endLine":47,"endColumn":35},{"ruleId":"55","severity":1,"message":"56","line":50,"column":38,"nodeType":"57","messageId":"58","endLine":50,"endColumn":40},{"ruleId":"55","severity":1,"message":"56","line":56,"column":26,"nodeType":"57","messageId":"58","endLine":56,"endColumn":28},{"ruleId":"66","severity":1,"message":"67","line":71,"column":12,"nodeType":"68","endLine":71,"endColumn":21,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],["70"],["71"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["70"],["71"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","'tokenRes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'recognizer'. Either include it or remove the dependency array.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [isMicOn, recognizer]",{"range":"75","text":"76"},[2909,2918],"[isMicOn, recognizer]"]